trigger:
- none

pool:
  name: VMSS-Linux-PROD

stages:
- stage: Prep
  displayName: Publish Auto Scaling Config File
  jobs:
  - job:
    steps:
    - task: CopyFiles@2
      displayName: 'Copy test files'
      inputs:
        Content: tx-api-auto-scaling-config.json
        SourceFolder: Solutions/MvcWebApiControllerInFargate/Deployment/Pipelines
        TargetFolder: $(Build.ArtifactStagingDirectory)/Pipelines
    - publish: $(Build.ArtifactStagingDirectory)/Pipelines
      displayName: Publish Auto Scaling Config File
      artifact: drop

- stage: Deploy
  displayName: Create Auto Scaling in ECS Service
  jobs:
  - deployment: AutoScaling
    displayName: Create Auto Scaling in ECS Service
    container:
      image: ssppaps1arpscr1.azurecr.io/ubuntu1804-build-agent
      endpoint: DevOps-ACR-PROD
    variables:
    - group: IAC-Non-Prod    
    - group: 'TMCT-ECS-Non-Prod'
    environment: Dev
    strategy:
      runOnce:
        deploy:
        steps:
        - task: AWS-Azure-Login-Config@1
          displayName: 'AWS-Azure-Login-Config'
          inputs:
            AzureDefaultUsername: '$(AZURE_DEFAULT_USERNAME)'
            AzureDefaultPassword: '$(AZURE_DEFAULT_PASSWORD)'
            AppName: 'AWS-ESSC-N-0'
            ProgrammaticRoleARN: '$(AZURE_DEFAULT_ROLE_ARN)'
            ProgrammaticProfileName: '$(AWS_PROG_PROFILE)'
            AssumedRoleARN: '$(AWS_ASSUMED_ROLE_ARN)'
            AssumedProfileName: '$(AWS_ASSUMED_PROFILE)'
            ProfileRegion: '$(AWS_PROFILE_REGION)'
            InstallAWSCLI: true
            InstallAWSAzureLogin: true

        - download: current
          artifact: drop

        - script: |    
            aws application-autoscaling register-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount --resource-id service/tx-api-ecs-cluster/tx-api-service-lb --min-capacity 2 --max-capacity 10 --profile $(AWS_ASSUMED_PROFILE)
          displayName: 'Register a scalable target'  

        - script: |            
            aws application-autoscaling put-scaling-policy --service-namespace ecs --scalable-dimension ecs:service:DesiredCount --resource-id service/tx-api-ecs-cluster/tx-api-service-lb --policy-name tx-api-ecs-lb-auto-scaler --policy-type StepScaling --step-scaling-policy-configuration file://tx-api-auto-scaling-config.json --profile $(AWS_ASSUMED_PROFILE) 
          workingDirectory: $(Pipeline.Workspace)/drop
          displayName: 'Create a step scaling policy'  

        - script: |    
            aws cloudwatch put-metric-alarm --alarm-name TxApiEcslbAutoScalerCpuUtilization --metric-name CPUUtilization --namespace AWS/ECS --statistic Maximum --period 60 --evaluation-periods 1 --threshold 10 --comparison-operator GreaterThanOrEqualToThreshold --dimensions Name=ClusterName,Value=tx-api-ecs-cluster Name=ServiceName,Value=x-api-service-lb --alarm-actions arn:aws:autoscaling:us-west-2:638844603513:scalingPolicy:5acd3587-3ece-4e81-8858-37a1b94cba96:resource/ecs/service/tx-api-ecs-cluster/tx-api-service-lb:policyName/tx-api-ecs-lb-auto-scaler --profile $(AWS_ASSUMED_PROFILE)            
          displayName: 'Create an alarm that triggers the scaling policy'  