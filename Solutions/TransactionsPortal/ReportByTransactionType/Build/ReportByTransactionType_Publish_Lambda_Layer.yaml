# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- none

variables:
- group: IAC-Non-Prod

pool:
  name: VMSS-Linux-PROD

# Run pipeline tasks in container using FA standard build image
container:
  image: ssppaps1arpscr1.azurecr.io/ubuntu1804-build-agent
  endpoint: DevOps-ACR-PROD
  
steps:
- task: NuGetToolInstaller@1
  displayName: 'Use NuGet 6.0.0'
  inputs:
    versionSpec: 6.0.0

- task: UseDotNet@2
  displayName: 'Use .NET Core SDK 3.x'
  inputs:
    version: 3.1.x

- task: NuGetAuthenticate@0

- task: AWS-Azure-Login-Config@1
  inputs:
    AzureDefaultUsername: '$(AZURE_DEFAULT_USERNAME)'
    AzureDefaultPassword: '$(AZURE_DEFAULT_PASSWORD)'
    AppName: 'AWS-ESSC-N-0'
    ProgrammaticRoleARN: '$(AZURE_DEFAULT_ROLE_ARN)'
    ProgrammaticProfileName: '$(AWS_PROG_PROFILE)'
    AssumedRoleARN: '$(AWS_ASSUMED_ROLE_ARN)'
    AssumedProfileName: '$(AWS_ASSUMED_PROFILE)'
    ProfileRegion: '$(AWS_PROFILE_REGION)'
    ActivationDuration: '8'
    InstallAWSCLI: true
    InstallAWSAzureLogin: true
    DebugMode: false

- script: |
    aws sts get-caller-identity --profile '$(AWS_PROG_PROFILE)'
    aws sts get-caller-identity --profile '$(AWS_ASSUMED_PROFILE)'
  displayName: 'get identity'
- script: |    
    cd "Solutions/TransactionsPortal/ReportByTransactionType/Report.TransactionType.Service.Lambda"
    dotnet tool install -g Amazon.Lambda.Tools
    dotnet lambda publish-layer aws-sdk-api-dynamodb-sqs-libs-r2r --layer-type runtime-package-store --s3-bucket tc-new-layer --profile '$(AWS_ASSUMED_PROFILE)' --region '$(AWS_PROFILE_REGION)'
  displayName: 'publish layer'
  
